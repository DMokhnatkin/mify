// TODO: refactor!!!

package workspace

import (
	"fmt"
	"io/ioutil"
	"path"
	"path/filepath"

	"github.com/chebykinn/mify/internal/mify/util"
	"github.com/chebykinn/mify/pkg/mifyconfig"
)

const (
	ApiGatewayName    = "api-gateway"
	MainApiSchemaName = "api.yaml"
	MifySchemaName    = "service.mify.yaml"
	GoServicesDirName = "go_services"
)

type GoService struct {
	Name string
}

type Description struct {
	Name       string
	BasePath   string
	GoRoot     string // Path to go_services
	Config     mifyconfig.WorkspaceConfig
	TplHeader  string
	GoServices []GoService
}

func InitDescription(workspacePath string) (Description, error) {
	wrapError := func(err error) error {
		return fmt.Errorf("can't initialize description: %w", err)
	}

	if len(workspacePath) == 0 {
		var err error
		workspacePath, err = mifyconfig.FindWorkspaceConfigPath()
		if err != nil {
			return Description{}, wrapError(err)
		}
	}

	conf, err := mifyconfig.ReadWorkspaceConfig(workspacePath)
	if err != nil {
		return Description{}, wrapError(err)
	}

	res := Description{
		Name:      filepath.Base(workspacePath), // TODO: validate
		BasePath:  workspacePath,
		GoRoot:    filepath.Join(workspacePath, mifyconfig.GoServicesRoot),
		Config:    conf,
		TplHeader: "// THIS FILE IS AUTOGENERATED, DO NOT EDIT\n// Generated by mify",
	}

	if err = fillGoServices(&res); err != nil {
		return res, wrapError(err)
	}

	return res, nil
}

// Path to include app.go
func (c Description) GetAppIncludePath(serviceName string) string {
	return fmt.Sprintf(
		"%s/go_services/internal/%s/generated/app",
		c.GetRepository(),
		serviceName)
}

func (c Description) GetSchemasRootRelPath() string {
	return "schemas"
}

func (c Description) GetSchemasRootAbsPath() string {
	return path.Join(c.BasePath, c.GetSchemasRootRelPath())
}

func (c Description) GetSchemasRelPath(serviceName string) string {
	return path.Join(c.GetSchemasRootRelPath(), serviceName)
}

func (c Description) GetSchemasAbsPath(serviceName string) string {
	return path.Join(c.BasePath, c.GetSchemasRelPath(serviceName))
}

func (c Description) GetMifySchemaRelPath(serviceName string) string {
	return path.Join(c.GetSchemasRelPath(serviceName), MifySchemaName)
}

func (c Description) GetMifySchemaAbsPath(serviceName string) string {
	return path.Join(c.BasePath, c.GetMifySchemaRelPath(serviceName))
}

func (c Description) GetApiSchemaDirRelPath(serviceName string) string {
	return path.Join("schemas", serviceName, "api")
}

func (c Description) GetApiSchemaDirAbsPath(serviceName string) string {
	return path.Join(c.BasePath, c.GetApiSchemaDirRelPath(serviceName))
}

func (c Description) GetApiSchemaAbsPath(serviceName string, schemaName string) string {
	return path.Join(c.BasePath, "schemas", serviceName, "api", schemaName)
}

// Abs path to api_generated.yaml
func (c Description) GetApiSchemaGenAbsPath(serviceName string) string {
	return path.Join(c.BasePath, "schemas", serviceName, "api/api_generated.yaml")
}

func (c *Description) GetRepository() string {
	return fmt.Sprintf("%s/%s/%s",
		c.Config.GitHost,
		c.Config.GitNamespace,
		c.Config.GitRepository)
}

func (c Description) GetGoModule() string {
	return fmt.Sprintf("%s/%s",
		c.GetRepository(),
		mifyconfig.GoServicesRoot)
}

func (c *Description) GetGoServicesPath() string {
	return path.Join(c.BasePath, "go_services")
}

func (c *Description) GetCmdPath(serviceName string) string {
	return path.Join(c.GetGoServicesPath(), "cmd", serviceName)
}

func (c *Description) GetGeneratedRelPath(serviceName string) string {
	return path.Join(mifyconfig.GoServicesRoot, "internal", serviceName, "generated")
}

func (c *Description) GetGeneratedAbsPath(serviceName string) string {
	return path.Join(c.BasePath, c.GetGeneratedRelPath(serviceName))
}

func (c *Description) GetJsGeneratedRelPath(serviceName string) string {
	return path.Join(mifyconfig.JsServicesRoot, serviceName, "generated")
}

func (c *Description) GetJsGeneratedAbsPath(serviceName string) string {
	return path.Join(c.BasePath, c.GetJsGeneratedRelPath(serviceName))
}

func (c *Description) GetAppPath(serviceName string) string {
	return path.Join(c.GetGoServicesPath(), "internal", serviceName, "generated/app")
}

// Name which can be used in generated go code
func (c GoService) GetSafeName() string {
	return util.ToSafeGoVariableName(c.Name)
}

func fillGoServices(ctx *Description) error {
	ctx.GoServices = make([]GoService, 0)

	files, err := ioutil.ReadDir(filepath.Join(ctx.GoRoot, "cmd"))
	if err != nil {
		return nil
	}

	for _, f := range files {
		if f.IsDir() && f.Name() != "dev-runner" {
			ctx.GoServices = append(ctx.GoServices, GoService{
				Name: f.Name(),
			})
		}
	}

	return nil
}

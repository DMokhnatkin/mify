// THIS FILE IS AUTOGENERATED, DO NOT EDIT
// Generated by mify via OpenAPI Generator

package openapi

import (
	"net/http"
	"strings"

	"example.com/namespace/workspace1/go-services/internal/service1/generated/core"
)

// PathToApiApiController binds http requests to an api service and writes the service results to the http response
type PathToApiApiController struct {
	ctx          *core.MifyServiceContext
	service      PathToApiApiServicer
	errorHandler ErrorHandler
}

// PathToApiApiOption for how the controller is set up.
type PathToApiApiOption func(*PathToApiApiController)

// WithPathToApiApiErrorHandler inject ErrorHandler into controller
func WithPathToApiApiErrorHandler(h ErrorHandler) PathToApiApiOption {
	return func(c *PathToApiApiController) {
		c.errorHandler = h
	}
}

// NewPathToApiApiController creates a default api controller
func NewPathToApiApiController(ctx *core.MifyServiceContext, s PathToApiApiServicer, opts ...PathToApiApiOption) Router {
	controller := &PathToApiApiController{
		ctx:          ctx,
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the PathToApiApiController
func (c *PathToApiApiController) Routes() Routes {
	return Routes{
		{
			"PathToApiGet",
			strings.ToUpper("Get"),
			"/path/to/api",
			c.PathToApiGet,
		},
	}
}

// PathToApiGet - sample handler
func (c *PathToApiApiController) PathToApiGet(w http.ResponseWriter, r *http.Request) {
	builder := r.Context().Value(MifyContextField).(*core.MifyRequestContextBuilder)

	reqCtx, err := builder.Build(r, w)
	if err != nil {
		resp := Response(http.StatusInternalServerError, nil)
		c.errorHandler(w, r, err, &resp)
		return
	}

	result, err := c.service.PathToApiGet(reqCtx)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

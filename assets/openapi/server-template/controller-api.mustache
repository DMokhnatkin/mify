{{>partial_header}}
package {{packageName}}

import (
	"net/http"
	"strings"

{{#routers}}
	{{#mux}}
	"github.com/gorilla/mux"
	{{/mux}}
{{/routers}}
)

// {{classname}}Controller binds http requests to an api service and writes the service results to the http response
type {{classname}}Controller struct {
	service {{classname}}Servicer
	errorHandler ErrorHandler
}

// {{classname}}Option for how the controller is set up.
type {{classname}}Option func(*{{classname}}Controller)

// With{{classname}}ErrorHandler inject ErrorHandler into controller
func With{{classname}}ErrorHandler(h ErrorHandler) {{classname}}Option {
	return func(c *{{classname}}Controller) {
		c.errorHandler = h
	}
}

// New{{classname}}Controller creates a default api controller
func New{{classname}}Controller(s {{classname}}Servicer, opts ...{{classname}}Option) Router {
	controller := &{{classname}}Controller{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the {{classname}}Controller
func (c *{{classname}}Controller) Routes() Routes {
	return Routes{ {{#operations}}{{#operation}}
		{
			"{{operationId}}",
			strings.ToUpper("{{httpMethod}}"),
			"{{{basePathWithoutHost}}}{{{path}}}",
			c.{{operationId}},
		},{{/operation}}{{/operations}}
	}
}{{#operations}}{{#operation}}

// {{nickname}} - {{{summary}}}
{{#isDeprecated}}
// Deprecated
{{/isDeprecated}}
func (c *{{classname}}Controller) {{nickname}}(w http.ResponseWriter, r *http.Request) {
	{{#hasFormParams}}
	{{#isMultipart}}
	if err := r.ParseMultipartForm(32 << 20); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	{{/isMultipart}}
	{{^isMultipart}}
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	{{/isMultipart}}
	{{/hasFormParams}}
	{{#routers}}
		{{#mux}}
			{{#hasPathParams}}
	params := mux.Vars(r)
			{{/hasPathParams}}
		{{/mux}}
	{{/routers}}
	{{#hasQueryParams}}
	query := r.URL.Query()
	{{/hasQueryParams}}
	{{#allParams}}
	{{#isPathParam}}
	{{#isLong}}
	{{paramName}}ParamRaw, err := parseInt64Parameter({{#routers}}{{#mux}}params["{{baseName}}"]{{/mux}}{{#chi}}getURLParam(r, "{{baseName}}"){{/chi}}{{/routers}}, {{required}})
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	{{/isLong}}
	{{#isInteger}}
	{{paramName}}ParamRaw, err := parseInt32Parameter({{#routers}}{{#mux}}params["{{baseName}}"]{{/mux}}{{#chi}}getURLParam(r, "{{baseName}}"){{/chi}}{{/routers}}, {{required}})
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	{{/isInteger}}
	{{^isLong}}
	{{^isInteger}}
	{{paramName}}ParamRaw := {{#routers}}{{#mux}}params["{{baseName}}"]{{/mux}}{{#chi}}getURLParam(r, "{{baseName}}"){{/chi}}{{/routers}}
	{{/isInteger}}{{/isLong}}
	{{/isPathParam}}
	{{#isQueryParam}}
	{{#isLong}}
	{{paramName}}ParamRaw, err := parseInt64Parameter(query.Get("{{baseName}}"), {{required}})
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	{{/isLong}}
	{{#isInteger}}
	{{paramName}}ParamRaw, err := parseInt32Parameter(query.Get("{{baseName}}"), {{required}})
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	{{/isInteger}}
	{{#isBoolean}}
	{{paramName}}ParamRaw, err := parseBoolParameter(query.Get("{{baseName}}"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	{{/isBoolean}}
	{{^isLong}}
	{{^isInteger}}
	{{^isBoolean}}
	{{paramName}}ParamRaw := {{#isArray}}strings.Split({{/isArray}}query.Get("{{baseName}}"){{#isArray}}, ","){{/isArray}}
	{{/isBoolean}}
	{{/isInteger}}
	{{/isLong}}
	{{/isQueryParam}}
	{{#isFormParam}}
	{{#isFile}}{{#isArray}}
	{{paramName}}ParamRaw, err := ReadFormFilesToTempFiles(r, "{{baseName}}"){{/isArray}}{{^isArray}}
	{{paramName}}ParamRaw, err := ReadFormFileToTempFile(r, "{{baseName}}")
	{{/isArray}}
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	{{/isFile}}
	{{#isLong}}{{#isArray}}
	{{paramName}}ParamRaw, err := parseInt64ArrayParameter(r.FormValue("{{baseName}}"), ",", {{required}}){{/isArray}}{{^isArray}}
	{{paramName}}ParamRaw, err := parseInt64Parameter(r.FormValue("{{baseName}}"), {{required}}){{/isArray}}
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	{{/isLong}}
	{{#isInteger}}{{#isArray}}
	{{paramName}}ParamRaw, err := parseInt32ArrayParameter(r.FormValue("{{baseName}}"), ",", {{required}}){{/isArray}}{{^isArray}}
	{{paramName}}ParamRaw, err := parseInt32Parameter(r.FormValue("{{baseName}}"), {{required}}){{/isArray}}
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	{{/isInteger}}
	{{^isFile}}
	{{^isLong}}
	{{paramName}}ParamRaw := r.FormValue("{{baseName}}")
	{{/isLong}}
	{{/isFile}}
	{{/isFormParam}}
	{{#isHeaderParam}}
	{{paramName}}ParamRaw := r.Header.Get("{{baseName}}")
	{{/isHeaderParam}}
	{{#isBodyParam}}
	{{paramName}}ParamRaw := {{dataType}}{}
	d := getBodyDecoder(r.Body)
	{{^isAdditionalPropertiesTrue}}
	d.DisallowUnknownFields()
	{{/isAdditionalPropertiesTrue}}
	if err := d.Decode(&{{paramName}}ParamRaw); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	{{#isArray}}
		{{#items.isModel}}
	for _, el := range {{paramName}}ParamRaw {
		if err := Assert{{baseType}}Required(el); err != nil {
			c.errorHandler(w, r, err, nil)
			return
		}
	}
		{{/items.isModel}}
	{{/isArray}}
	{{^isArray}}
		{{#isModel}}
	if err := Assert{{baseType}}Required({{paramName}}ParamRaw); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
		{{/isModel}}
	{{/isArray}}
	{{/isBodyParam}}

	{{#isArray}}
	{{#items.isPrimitiveType}}
	{{paramName}}Param := {{paramName}}ParamRaw
	{{/items.isPrimitiveType}}
	{{^items.isPrimitiveType}}
	{{paramName}}Param := make({{dataType}}, len({{paramName}}ParamRaw))
	for i, v := range {{paramName}}ParamRaw {
		{{paramName}}Param[i] = {{baseType}}(v)
	}
	{{/items.isPrimitiveType}}
	{{/isArray}}
	{{^isArray}}
	{{#isPrimitiveType}}
	{{paramName}}Param := {{paramName}}ParamRaw
	{{/isPrimitiveType}}
	{{^isPrimitiveType}}
	{{#isBodyParam}}
	{{paramName}}Param := {{paramName}}ParamRaw
	{{/isBodyParam}}
	{{^isBodyParam}}
	{{paramName}}Param := {{baseType}}({{paramName}}ParamRaw)
	{{/isBodyParam}}
	{{/isPrimitiveType}}
	{{/isArray}}

	{{/allParams}}
	result, err := c.service.{{nickname}}(r.Context(), Dependencies{}{{#allParams}}, {{paramName}}Param{{/allParams}})
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code,{{#addResponseHeaders}} result.Headers,{{/addResponseHeaders}} w)

}{{/operation}}{{/operations}}

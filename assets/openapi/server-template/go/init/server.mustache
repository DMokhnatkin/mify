{{>partial_header}}
package {{packageName}}_init

import (
	"net/http"

	"github.com/go-chi/chi/v5"
	"go.uber.org/zap"

	"{{goModule}}/internal/{{serviceName}}/generated/core"
	"{{goModule}}/internal/pkg/generated/configs"

)

type ServerConf struct {
	ServerEndpoint string `envconfig:"{{serviceEndpointEnv}}" default:"{{serviceEndpoint}}"`
}

func getServerConf(conf *configs.MifyStaticConfig) *ServerConf {
	return conf.MustGetPtr((*ServerConf)(nil)).(*ServerConf)
}

func RunServer(ctx *core.MifyServiceContext, router chi.Router) error {
	conf := getServerConf(ctx.StaticConfig())
	ctx.Logger().Info("starting server", zap.String("endpoint", conf.ServerEndpoint))
	err := http.ListenAndServe(conf.ServerEndpoint, router)
	if err != nil {
		ctx.Logger().Error("failed to listen", zap.Error(err))
		return err
	}
	return nil
}

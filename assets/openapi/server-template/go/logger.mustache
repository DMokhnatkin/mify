{{>partial_header}}
package {{packageName}}

import (
	"context"
	"net/http"
	"time"
	"github.com/go-chi/chi/v5/middleware"
	"go.uber.org/zap"

	"{{gitHost}}/{{gitUserId}}/{{gitRepoId}}/internal/{{artifactId}}/generated/core"
)

type ctxKeyMifyContext int

const MifyContextField ctxKeyMifyContext = 0

func Logger(l *zap.Logger) func(next http.Handler) http.Handler {
	return func(next http.Handler) http.Handler {
		fn := func(w http.ResponseWriter, r *http.Request) {
			ww := middleware.NewWrapResponseWriter(w, r.ProtoMajor)
			requestId := middleware.GetReqID(r.Context())
			logger := l.With(
				zap.String("request_id", requestId),
				zap.String("proto", r.Proto),
				zap.String("path", r.URL.Path),
			)

			logger.Info("started processing request")

			mifyCtxBuilder := core.NewMifyRequestContextBuilder(logger)
			mifyCtxBuilder.SetRequestID(requestId)

			ctx := context.WithValue(r.Context(), MifyContextField, mifyCtxBuilder)

			t1 := time.Now()
			defer func() {
				logger.Info("finished processing request",
					zap.Duration("elapsed_sec", time.Since(t1)),
					zap.Int("status", ww.Status()),
					zap.Int("size", ww.BytesWritten()),
				)
			}()

			next.ServeHTTP(ww, r.WithContext(ctx))
		}
		return http.HandlerFunc(fn)
	}
}
